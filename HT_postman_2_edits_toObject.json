{
	"info": {
		"_postman_id": "28038f9f-6efd-4e90-88e8-77625a91edb6",
		"name": "HomeTask_postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let reque = request.data;\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Test 1 - Check name\", function () {\r",
							"    pm.expect(resp.name).to.eql(\"Viktoriia\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Test 2 - Check age\", function () {\r",
							"    pm.expect(resp.age).to.eql(\"34\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Test 3 - Check salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(50000);\r",
							"});\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Test 4 - Compare names\", function () {\r",
							"    pm.expect(resp.name).to.eql(reque.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Test 5 - Compare ages\", function () {\r",
							"    pm.expect(resp.age).to.eql(reque.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Test 6 - Compare salaries\", function () {\r",
							"    pm.expect(resp.salary).to.eql(parseInt(reque.salary));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(resp.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"pm.test(\"Test 7 - Verify that u_salary=salary*4\", function () {\r",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(parseInt(reque.salary * 4));\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Viktoriia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "50000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Test 1 - Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let reques=pm.request.url.query.toObject();\r",
							"console.log(reques); ////спарсили реквест (для GET)\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Test 2 - Check name\", function () {\r",
							"    pm.expect(resp.name).to.eql(reques.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Test 3 - Check age\", function () {\r",
							"    pm.expect(resp.age).to.eql(reques.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Test 4 - Check salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+(reques.salary));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"//console.log(resp.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Test 5 - Property name\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Test 6 - Property age\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Test 7 - Property name = Luky\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property('name').that.include(\"Luky\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test 8 - Property name = Luky (second)\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).that.include(\"Luky\");\r",
							"});\r",
							"\r",
							"pm.test(\"Test 9 - name = Luky (third) \", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.deep.include(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Test 10 - Luky age = 4\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.be.an(\"Object\").that.include({ \"age\": 4 });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Vika&age=31&salary=2700",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vika"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "2700"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Test 1 - Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"console.log(resp)\r",
							"//Спарсить request.\r",
							"//let req = pm.request.url.query.all(); // можно так спарсить но лучше обектом - тогда можно будет менять очередность параметров и это никак не повлияет на выполение тестов \r",
							"\r",
							"let req=pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Test 2 - Check name\", function () {\r",
							"    //pm.expect(resp.name).to.eql(req[0].value); //если бы применяли let req = pm.request.url.query.all() \r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Test 3 - Check age\", function () {\r",
							"    pm.expect(resp.age).to.eql(parseInt(req.age));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(resp.salary)\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp.salary[0])\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[1])\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp.salary[2])\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test 4 - Check salary\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(parseInt(req.salary));\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Test 5 - Check salary*2\", function () {\r",
							"    pm.expect(parseInt(resp.salary[1])).to.eql((parseInt(req.salary)) * 2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Test 6 - Check age\", function () {\r",
							"    pm.expect(Number(resp.salary[2])).to.eql((Number(req.salary)) * 3);\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", resp.name);\r",
							"\r",
							"//Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", +(req.age));\r",
							"\r",
							"//Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", JSON.stringify(resp.salary));\r",
							"const myArray = JSON.parse(pm.environment.get(\"salary\"));\r",
							"console.log(myArray)\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"myArray.forEach(person => console.log(person));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_4?name=Karl&age=35&salary=3500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Karl"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "3500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"const myArray = JSON.parse(pm.environment.get(\"salary\"));\r",
							"//console.log(myArray[0]);\r",
							"\r",
							"pm.environment.set(\"oneSalary\", +(myArray[0])); // взяла одну зп из массива для дальнейшего использования (переменные с окружения добавила в request body)\r",
							"\r",
							"//Вставить параметр age из окружения в age \r",
							"//Вставить параметр name из окружения в name\r",
							"//Отправить запрос.\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let resp = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let reque = request.data;\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Test 1 - Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Test 2 - Response has start_qa_salary\", function () {\r",
							"    pm.expect(resp.hasOwnProperty(\"start_qa_salary\")).to.eql(true);\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Test 3 - Response has qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp.hasOwnProperty(\"qa_salary_after_6_months\")).to.eql(true);\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Test 4 - Response has qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp.hasOwnProperty(\"qa_salary_after_12_months\")).to.eql(true);\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Test 5 - Response has qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp.hasOwnProperty(\"qa_salary_after_1.5_year\")).to.eql(true);\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Test 6 - Response has qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp.hasOwnProperty(\"qa_salary_after_3.5_years\")).to.eql(true);\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Test 7 - Check person param\", function () {\r",
							"    pm.expect(resp.hasOwnProperty(\"person\")).to.eql(true);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test 8 - start_qa_salary=salary \", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(+(reque.salary));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Test 9 - qa_salary_after_6_months = salary*2 \", function () {\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(reque.salary * 2);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Test 10 - qa_salary_after_12_months = salary*2.7 \", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(reque.salary * 2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Test 11 - qa_salary_after_12_months = salary*3.3 \", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.eql(reque.salary * 3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Test 12 -  qa_salary_after_3.5_years = salary*3.8 \", function () {\r",
							"    pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.eql(reque.salary * 3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test 13 -  u_name[1] = salary\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+(reque.salary));\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Test 14 -  u_age= age\", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(+(reque.age));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Test 15 -  u_salary_5_years = salary*4.2\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(reque.salary * 4.2);\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"let obj = resp.person;\r",
							"for (let key in obj) {\r",
							"    if (obj.hasOwnProperty(key)) {\r",
							"        console.log(`${key} : ${obj[key]}`)\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{oneSalary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}